#export

#PRODUCT_SETTINGS_PATH
PP_CONFIG_PATH="$SOURCE_ROOT/PP_SIDELOADER_OPTIONS.plist"

OVERWRITE_ORIGINAL_APP=$(/usr/libexec/PlistBuddy -c "Print OVERWRITE_ORIGINAL_APP" "$PP_CONFIG_PATH")
echo "OVERWRITE_ORIGINAL_APP: $OVERWRITE_ORIGINAL_APP"

KEEP_ORIGINAL_APP_NAME=$(/usr/libexec/PlistBuddy -c "Print KEEP_ORIGINAL_APP_NAME" "$PP_CONFIG_PATH")
echo "KEEP_ORIGINAL_APP_NAME: $KEEP_ORIGINAL_APP_NAME"

#define some common paths
TEMP_PATH="${SRCROOT}/temp"
WORKING_DIR="${SRCROOT}/working_dir"
EXTRACTED_IPA_PATH="$TEMP_PATH/EXTRACTED_IPA"

rm -rf "$TEMP_PATH" || true
rm -rf "$WORKING_DIR" || true

mkdir -p "$TEMP_PATH" || true
mkdir -p "$WORKING_DIR" || true

#lets extract the IPA
echo "EXTRACTING IPA"
unzip -oqq "${SRCROOT}/app.ipa" -d "$EXTRACTED_IPA_PATH"

#find the .app path
APP_PATH="$(set -- $EXTRACTED_IPA_PATH/Payload/*.app; echo "$1")"
echo "FOUND APP PATH: $APP_PATH"

#define some common variables
PP_TWEAK_PATH="$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/pptweak.dylib"
HOOKED_APP_BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print CFBundleIdentifier"  "$APP_PATH/Info.plist")

HOOKED_APP_NAME=$(/usr/libexec/PlistBuddy -c "Print CFBundleDisplayName"  "$APP_PATH/Info.plist")
HOOKED_APP_NAME="$HOOKED_APP_NAME ++"

HOOKED_EXECUTABLE=$(/usr/libexec/PlistBuddy -c "Print CFBundleExecutable"  "$APP_PATH/Info.plist")
HOOKED_EXE_PATH="$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/$HOOKED_EXECUTABLE"

#lets download the pp tweak for the app located in root
echo "DOWNLOADING PP TWEAK"
PP_TWEAK_ZIP_PATH="$TEMP_PATH/pptweak.zip"
curl -L "https://beta.unlimapps.com/ppsideloaded/$HOOKED_APP_BUNDLE_ID" -o "$PP_TWEAK_ZIP_PATH"

#now we can unzip the tweak into working directory
echo "EXTRACTING PP TWEAK"
unzip -oqq "$PP_TWEAK_ZIP_PATH" -d "$WORKING_DIR"

#copy over the app contents
echo "$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/"
rm -rf "$BUILT_PRODUCTS_DIR/$TARGET_NAME.app" || true
mkdir -p "$BUILT_PRODUCTS_DIR/$TARGET_NAME.app" || true
cp -rf "$APP_PATH/" "$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/"

#copy over all the dylibs
cp -rf "$WORKING_DIR/" "$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/"

#lets make sure the HOOKED_EXE has correct permissions
if ! [[ -x "$HOOKED_EXE_PATH" ]]
then
    echo "EXE NOT EXECUTABLE SO CHANGING PERMISSIONS"
    chmod +x "$HOOKED_EXE_PATH"
else
    echo "EXE IS EXECUTABLE"
fi

#change the display name to ++
if [ "$KEEP_ORIGINAL_APP_NAME" != true ] ; then
    echo 'KEEP_ORIGINAL_APP_NAME IS NOT ENABLED'
    /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName $HOOKED_APP_NAME" "$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/Info.plist"
fi

if [ "$OVERWRITE_ORIGINAL_APP" != true ] ; then
    echo 'PUSH IS NOT ENABLED'
    /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $PRODUCT_BUNDLE_IDENTIFIER" "$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/Info.plist"
fi

#add the dylib
"${SRCROOT}/script/insert_dylib" --all-yes --inplace --overwrite "@executable_path/pptweak.dylib" "$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/$HOOKED_EXECUTABLE"

#add the correct entitlements
TEMP_PLIST="$TEMP_PATH/temp.plist"
REAL_CODE_SIGN_ENTITLEMENTS="$TEMP_PATH/app.entitlements"
security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/"$EXPANDED_PROVISIONING_PROFILE.mobileprovision" -o "$TEMP_PLIST"
/usr/libexec/PlistBuddy -c "Print Entitlements" "$TEMP_PLIST" -x > "$REAL_CODE_SIGN_ENTITLEMENTS"

#sign all the executable binaries
/usr/bin/codesign --force --sign "$EXPANDED_CODE_SIGN_IDENTITY_NAME" "$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/libuasharedtools.dylib"
/usr/bin/codesign --force --sign "$EXPANDED_CODE_SIGN_IDENTITY_NAME" "$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/libuasharedanaltyicsflurry.dylib"
/usr/bin/codesign --force --sign "$EXPANDED_CODE_SIGN_IDENTITY_NAME" "$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/libuasharedanaltyics.dylib"
/usr/bin/codesign --force --sign "$EXPANDED_CODE_SIGN_IDENTITY_NAME" "$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/pptweak.dylib"

APP_PLUGINS_PATH="$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/PlugIns"
if [ -d "$APP_PLUGINS_PATH" ]; then
    for PLUGIN in "$APP_PLUGINS_PATH/"*.appex
    do
        #grab the plugin exe name
        #echo "PLUGIN: $PLUGIN"

        #if we don't care about push we can install it as an additional app
        PLUGIN_ID=$(/usr/libexec/PlistBuddy -c "Print CFBundleIdentifier"  "$PLUGIN/Info.plist")
        echo "PLUGIN_ID: $PLUGIN_ID"

        if [ "$OVERWRITE_ORIGINAL_APP" != true ] ; then
            echo 'PUSH IS NOT ENABLED'
            
            echo "SUB $HOOKED_APP_BUNDLE_ID WITH $PRODUCT_BUNDLE_IDENTIFIER IN $PLUGIN_ID"
            NEW_PLUGIN_ID=${PLUGIN_ID/$HOOKED_APP_BUNDLE_ID/$PRODUCT_BUNDLE_IDENTIFIER}

            #change the plugin id
            /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $NEW_PLUGIN_ID" "$PLUGIN/Info.plist"
        fi

        PLUGIN_EXE=$PLUGIN/$(/usr/libexec/PlistBuddy -c "Print CFBundleExecutable"  "$PLUGIN/Info.plist")
        echo "PLUGIN_EXE: $PLUGIN_EXE"

        #lets make sure the plugin has correct permissions
        if ! [[ -x "$PLUGIN_EXE" ]]
        then
            echo "PLUGIN_EXE NOT EXECUTABLE SO CHANGING PERMISSIONS"
            chmod +x "$PLUGIN_EXE"
        else
            echo "PLUGIN_EXE IS EXECUTABLE"
        fi

        #sign the extension
        /usr/bin/codesign --force --sign "$EXPANDED_CODE_SIGN_IDENTITY_NAME" "$PLUGIN_EXE"
    done
fi

APP_FRAMEWORKS_PATH="$BUILT_PRODUCTS_DIR/$TARGET_NAME.app/Frameworks"
if [ -d "$APP_FRAMEWORKS_PATH" ]; then
for FRAMEWORK in "$APP_FRAMEWORKS_PATH/"*
do
    #grab the framework name
    #echo "FRAMEWORK: $FRAMEWORK"

    #sign the FRAMEWORK
    /usr/bin/codesign --force --sign "$EXPANDED_CODE_SIGN_IDENTITY_NAME" "$FRAMEWORK"
done
fi

#make sure to add entitlements to the original app binary
/usr/bin/codesign --force --sign "$EXPANDED_CODE_SIGN_IDENTITY_NAME" --entitlements "$REAL_CODE_SIGN_ENTITLEMENTS" --timestamp=none "$HOOKED_EXE_PATH"
